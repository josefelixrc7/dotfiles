# Haciendo buenos *commits* en git

## Estructura

```
title

body

footer
```

## title (título)

La estructura del título es la siguiente:

```
type: Subject
```

Esta es la estructura fundamental del título de un commit, no hay que olvidar los dos puntos (**:**) y el espacio entre los dos puntos y el asunto

### type (tipo)

Esta es la esencia del commit, con solo leerlo, ya el desarrollador sabrá que qué se trata. Hay distintso tipos de commits, estos son mayormente para indicar el tipo de cambios en el código que se está haciendo:

* __feat__: una nueva característica que se ha añadido al sistema. Implica algo que se ha añadido
* __fix__: cuando se soluciona un bug o error
* __docs__: cuando se realizan cambios en la documentación o comentarios
* __style__: se aplicó formato, comas, puntos faltantes, paréntesis, entre otros. Sin cambios de estructura en el código
* __refactor__: refactorización del código, es cuando cambiamos totalmente la estructura de una sección de nuestro código. O cuando aplicamos cierta estructura que el código antes no tenía. Implica el cambio de un código a otro
* __test__: es cuando añadimos código que servirá para probar lo que se está creando o implementando. No influye otras secciones del código pero cuando llegue a funcionar será una nueva característica.
* __chore__: actualización de las tareas del build, configuraciones administrativas del *debug* o *release*, configuración de los *Makefile*, entre otros.

### Subject (asunto)

Le indica a los desarrolladores el motivo principal del commit.

* Debe ser en inglés
* No debe contener más de 50 caracteres.
* Debe de ser sólo una línea
* Debe iniciar con una letra mayúscula
* No debe terminar con punto
* Hay que ser imperativos y muy objetivos con lo que se quiere decir
* Imperativos en el inglés implica usar *change* o *fix* en vez de usar *changes*, *changed* o *fixes*, *fixed*, entre otros.

## body (cuerpo)

En el cuerpo está la explicación detallada de los cambios realizados en el commit. 

* No todos los commits tienen un cuerpo (esto depende de la compejidad del commit)
* ¿Qué se cambió?
* ¿Por qué se cambió?
* Todo seperado por parrafos, dejando una línea de por medio
* No más de 70 caracteres
* Hay que hacer un salto de línea después del título y cuando un parrafo se hace muy largo y continuar debajo
* Podemos cerrar con un punto

## footer (pie)

El pie nos indica el siguimiento de problemas, issues, cambios, entre otros.

* No siempre es necesario
* Se pueden incluir issues o problemas resueltos
* Se añaden informaciones extras relacionadas con el commit indirectamente
* Se pueden usar `resolves: issue #48` o `see also: issue #52, #67, #12` 